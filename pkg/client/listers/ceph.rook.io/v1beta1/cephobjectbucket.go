/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/rook/rook/pkg/apis/ceph.rook.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CephObjectBucketLister helps list CephObjectBuckets.
type CephObjectBucketLister interface {
	// List lists all CephObjectBuckets in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.CephObjectBucket, err error)
	// CephObjectBuckets returns an object that can list and get CephObjectBuckets.
	CephObjectBuckets(namespace string) CephObjectBucketNamespaceLister
	CephObjectBucketListerExpansion
}

// cephObjectBucketLister implements the CephObjectBucketLister interface.
type cephObjectBucketLister struct {
	indexer cache.Indexer
}

// NewCephObjectBucketLister returns a new CephObjectBucketLister.
func NewCephObjectBucketLister(indexer cache.Indexer) CephObjectBucketLister {
	return &cephObjectBucketLister{indexer: indexer}
}

// List lists all CephObjectBuckets in the indexer.
func (s *cephObjectBucketLister) List(selector labels.Selector) (ret []*v1beta1.CephObjectBucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CephObjectBucket))
	})
	return ret, err
}

// CephObjectBuckets returns an object that can list and get CephObjectBuckets.
func (s *cephObjectBucketLister) CephObjectBuckets(namespace string) CephObjectBucketNamespaceLister {
	return cephObjectBucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CephObjectBucketNamespaceLister helps list and get CephObjectBuckets.
type CephObjectBucketNamespaceLister interface {
	// List lists all CephObjectBuckets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.CephObjectBucket, err error)
	// Get retrieves the CephObjectBucket from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.CephObjectBucket, error)
	CephObjectBucketNamespaceListerExpansion
}

// cephObjectBucketNamespaceLister implements the CephObjectBucketNamespaceLister
// interface.
type cephObjectBucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CephObjectBuckets in the indexer for a given namespace.
func (s cephObjectBucketNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.CephObjectBucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CephObjectBucket))
	})
	return ret, err
}

// Get retrieves the CephObjectBucket from the indexer for a given namespace and name.
func (s cephObjectBucketNamespaceLister) Get(name string) (*v1beta1.CephObjectBucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("cephobjectbucket"), name)
	}
	return obj.(*v1beta1.CephObjectBucket), nil
}
